- platform: template
  sensors:
    last_alexa:
      entity_id:
        - media_player.bathroom_dot
        - media_player.bedroom_dot
        - media_player.dining_dot
        - media_player.dressing_room_dot
        - media_player.garage_dot
        - media_player.garden_room_dot
        - media_player.hall_dot
        - media_player.kitchen_dot
        - media_player.landing_dot
        - media_player.living_room_dot
        - media_player.office_dot
        - media_player.utility_dot
      value_template: >
        {{ states.media_player | selectattr('attributes.last_called','eq',True) | map(attribute='entity_id') | first }}

- platform: template
  sensors:
    last_activated:
      friendly_name: "Last Motion"
      value_template: >
        {% set sensors = [states.binary_sensor.bathroom_bathroom_motion_418, states.binary_sensor.dressing_room_dressing_motion_296, states.binary_sensor.kitchen_kitchen_motion_106, states.binary_sensor.landing_landing_motion_281, states.binary_sensor.office_office_motion_288, states.binary_sensor.utility_utility_motion_440] %}
        {% set time = sensors | map(attribute='last_changed') | max %}
        {% set sensor = (sensors | selectattr('last_changed','eq', time) | list)[0] %}
        {{sensor.entity_id}}

- platform: rest
  name: Energy
  resource: !secret powerwall_aggregates_url
  value_template: "{{ value_json.load.instant_power / 1000 }}"
  unit_of_measurement: kW
  method: GET
  verify_ssl: false
  json_attributes:
    - site
    - battery
    - load
    - solar

- platform: template
  sensors:
    energy_solar_instant_power:
      friendly_name: Solar
      value_template: "{{ (states.sensor.energy.attributes.solar.instant_power / 1000 | float) | round(3) }}"
      unit_of_measurement: kW
    energy_load_instant_power:
      friendly_name: House
      value_template: "{{ (states.sensor.energy.attributes.load.instant_power / 1000 | float) | round(3) }}"
      unit_of_measurement: kW
    energy_battery_instant_power:
      friendly_name: Battery
      value_template: "{{ (states.sensor.energy.attributes.battery.instant_power / 1000 | float) | round(3) }}"
      unit_of_measurement: kWh
    energy_grid_instant_power:
      friendly_name: Grid
      value_template: "{{ (states.sensor.energy.attributes.site.instant_power / 1000 | float) | round(3) }}"
      unit_of_measurement: kWh

- platform: rest
  name: Powerwall Charge
  resource: !secret powerwall_soe_url
  method: GET
  verify_ssl: false
  value_template: "{{ value_json.percentage | float | round(2) }}"
  unit_of_measurement: "%"

- platform: command_line
  name: electricity_cost
  scan_interval: 1800
  command: curl "https://api.octopus.energy/v1/products/AGILE-18-02-21/electricity-tariffs/E-1R-AGILE-18-02-21-H/standard-unit-rates/?period_from={{ now().year }}-{{ now().month }}-{{ now().day }}T{{ now().hour }}:{% if now().minute <30 %}00{% else %}30{% endif %}&period_to={{ now().year }}-{{ now().month }}-{% if (now().hour == 23) and (now().minute >=30) %}{{ now().day+1 }}{% else %}{{ now().day }}{% endif %}T{% if (now().hour == 23) and (now().minute >=30) %}00{% elif now().minute >=30 %}{{ now().hour+1}}{% else %}{{ now().hour}}{% endif %}:{% if now().minute >=30 %}00{% else %}30{% endif %}"
  value_template: "{{ (value_json.results[0].value_inc_vat) | round(2) }}"
  unit_of_measurement: "p/KWH"

- platform: template
  sensors:
    living_room:
      value_template: '{{ state_attr("remote.living_room", "current_activity") }}'
      friendly_name: "Living Room"
    garden_room:
      value_template: '{{ state_attr("remote.garden_room", "current_activity") }}'
      friendly_name: "Garden Room"

- platform: template
  sensors:
    low_battery:
      friendly_name: "Low Battery"
      value_template: >
        {%- set threshold = 30 -%}
        {%- set domains = ['light', 'switch', 'sensor', 'zwave', 'lock'] -%}
        {%- for domain in domains -%}
        {%- for item in states[domain] if (not "Battery" == item.name) and (not "Low" in item.name) and (not "Critical" in item.name) and ((item.attributes.battery_level is defined and item.attributes['battery_level'] | int < threshold) or ("battery" in item.name | lower and ((item.state | int < threshold and item.state|int != 0) or item.state | lower == "low" or item.state | lower == "unknown"))) -%}
            {{ item.attributes.friendly_name|lower|replace("pet_flap","")|replace("battery state","")|replace("battery level","")|trim|title }}{%- if not loop.last %}, {% endif -%}
        {%- endfor -%}
        {%- endfor -%}

- platform: template
  sensors:
    critical_battery:
      friendly_name: "Critical Battery"
      value_template: >
        {%- set threshold = 15 -%}
        {%- set domains = ['light', 'switch', 'sensor', 'zwave', 'lock'] -%}
        {%- for domain in domains -%}
        {%- for item in states[domain] if (not "Battery" == item.name) and (not "Low" in item.name) and (not "Critical" in item.name) and ((item.attributes.battery_level is defined and item.attributes['battery_level'] | int < threshold) or ("battery" in item.name | lower and ((item.state | int < threshold and item.state|int != 0) or item.state | lower == "low" or item.state | lower == "unknown"))) -%}
            {{ item.attributes.friendly_name|lower|replace("pet_flap","")|replace("battery state","")|replace("battery level","")|trim|title }}{%- if not loop.last %}, {% endif -%}
        {%- endfor -%}
        {%- endfor -%}

- platform: template
  sensors:
    dishwasher_state:
      value_template: "{{ states.input_select.dishwasher_status.state}}"
      friendly_name: "Dishwasher State"
- platform: template
  sensors:
    tumble_state:
      value_template: "{{ states.input_select.tumble_status.state}}"
      friendly_name: "Tumble State"
- platform: template
  sensors:
    washer_state:
      value_template: "{{ states.input_select.washer_status.state}}"
      friendly_name: "Washer State"

- platform: template
  sensors:
    garage_status:
      friendly_name: "Garage Door Status"
      value_template: '{% if states.cover.garagedoor %}
        {% if states.cover.garagedoor.attributes["door_state"] == "open" %}
        Open
        {% elif states.cover.garagedoor.attributes["door_state"] == "closed" %}
        Closed
        {% elif states.cover.garagedoor.attributes["door_state"] == "opening" %}
        Opening
        {% elif states.cover.garagedoor.attributes["door_state"] == "closing" %}
        Closing
        {% else %}
        Unknown
        {% endif %}
        {% else %}
        n/a
        {% endif %}'
    garage_car_present:
      friendly_name: "i8 in Garage"
      value_template: '{% if states.cover.garagedoor %}
        {% if is_state("cover.garagedoor", "open") %}
        n/a
        {% elif ((states.cover.garagedoor.attributes["distance_sensor"] > 40) and (states.cover.garagedoor.attributes["distance_sensor"] < 150)) %}
        Yes
        {% else %}
        No
        {% endif %}
        {% else %}
        n/a
        {% endif %}'

- platform: template
  sensors:
    i8_mileage_miles:
      friendly_name: "i8 Mileage"
      unit_of_measurement: "mi"
      value_template: "{{ (states('sensor.i8_mileage')|float / 1.609) | round(0) }}"
      icon_template: mdi:speedometer
    i8_max_range_electric_miles:
      friendly_name: "i8 Max Range Electric"
      unit_of_measurement: "mi"
      value_template: "{{ (states('sensor.i8_max_range_electric')|float / 1.609) | round(0) }}"
      icon_template: mdi:speedometer
    i8_remaining_range_electric_miles:
      value_template: "{{ (states('sensor.i8_remaining_range_electric')|float / 1.609) | round(0) }}"
      friendly_name: "i8 Remaining Range Electric"
      unit_of_measurement: "mi"
      icon_template: mdi:speedometer
    i8_remaining_range_fuel_miles:
      friendly_name: "i8 Remaining Range Fuel"
      unit_of_measurement: "mi"
      value_template: "{{ (states('sensor.i8_remaining_range_fuel')|float / 1.609) | round(0) }}"
      icon_template: mdi:gas-station
    i8_remaining_range_total_miles:
      friendly_name: "i8 Remaining Range Total"
      unit_of_measurement: "mi"
      value_template: "{{ (states('sensor.i8_remaining_range_total')|float / 1.609) | round(0) }}"
      icon_template: mdi:gas-station
    i8_mileage_target:
      friendly_name: "i8 Mileage Target"
      unit_of_measurement: "mi"
      icon_template: mdi:bullseye-arrow
      value_template: "{{ ((as_timestamp(now())-(states.input_datetime.i8_purchase.attributes.timestamp)) | int /60/1440/365.25*8000) | round(0) }}"

- platform: template
  sensors:
    i8_mileage_delta:
      friendly_name: "i8 Mileage Delta"
      unit_of_measurement: "mi"
      value_template: "{{ states('sensor.i8_mileage_miles')|int - states('sensor.i8_mileage_target')|int  }}"
      icon_template: mdi:delta

- platform: rest
  name: octopus_sensors
  resource: http://192.168.1.205:3002/
  json_attributes:
    - cheap
    - high
    - low
  value_template: "OK"
- platform: template
  sensors:
    octopus_peak_price:
      value_template: '{{ states.sensor.octopus_sensors.attributes["high"]["price"] | round(2) }}'
      unit_of_measurement: "p/KWH"
    octopus_peak_from:
      value_template: '{{  states.sensor.octopus_sensors.attributes["high"]["from"] | timestamp_local }}'
    octopus_peak_to:
      value_template: '{{ states.sensor.octopus_sensors.attributes["high"]["to"] | timestamp_local }}'
    octopus_offpeak_price:
      value_template: '{{ states.sensor.octopus_sensors.attributes["low"]["price"] | round(2) }}'
      unit_of_measurement: "p/KWH"
    octopus_offpeak_from:
      value_template: '{{ states.sensor.octopus_sensors.attributes["low"]["from"] | timestamp_local }}'
    octopus_offpeak_to:
      value_template: '{{ states.sensor.octopus_sensors.attributes["low"]["to"] | timestamp_local }}'

- platform: template
  sensors:
    sun_azimuth:
      friendly_name: "Sun Azimuth"
      unit_of_measurement: "degrees"
      value_template: "{{ state_attr('sun.sun', 'azimuth') }}"

- platform: template
  sensors:
    sun_elevation:
      friendly_name: "Sun Elevation"
      unit_of_measurement: "degrees"
      value_template: "{{ state_attr('sun.sun', 'elevation') }}"

- platform: darksky
  api_key: 1f251bc9cc54ca9bdb9c9259a65370df
  forecast:
    - 0
  hourly_forecast:
    - 0
    - 1
  monitored_conditions:
    - summary
    - icon
    - temperature
    - apparent_temperature
    - cloud_cover
    - uv_index
    - humidity

- platform: template
  sensors:
    bathroom_humidity_high:
      friendly_name: "Bathroom Humidity High"
      value_template: "{{ states('sensor.bathroom_bathroom_humidity_421')|float > states('sensor.dark_sky_humidity')|float and states('sensor.bathroom_bathroom_humidity_421')|float > states('sensor.landing_landing_humidity_284')|float }}"
