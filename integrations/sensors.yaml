sensor:
  - platform: time_date
    display_options:
      - "time"
      - "date"
      - "date_time"
      - "date_time_utc"
      - "date_time_iso"
      - "time_date"
      - "time_utc"

  - platform: template
    sensors:
      guestlamp_on:
        unique_id: "guestlamp_on"
        value_template: >
          {{ states("sensor.guestlamp_energy_power") | float(0) > 2 }}
      bedleftlamp_on:
        unique_id: "bedleftlamp_on"
        value_template: >
          {{ states("sensor.bedleft_energy_power") | float(0) > 2 }}
      bedrightlamp_on:
        unique_id: "bedrightlamp_on"
        value_template: >
          {{ states("sensor.bed_right_energy_power") | float(0) > 2 }}
      quooker_on:
        unique_id: "quooker_on"
        value_template: >
          {{ states("sensor.quooker_energy_power") | float(0) > 2 }}
      bathroom_is_red:
        unique_id: "bathroom_is_red"
        value_template: >
          {{ state_attr('light.shelly_bathroom_mirror_rgb', 'rgbw_color')[0] > 0 }}
      bathroom_red_opacity:
        unique_id: "bathroom_red_opacity"
        value_template: >
          {{ (state_attr('light.shelly_bathroom_mirror_rgb', 'rgbw_color')[0]) / 255  }}

      ## Converts time and date into sentence for UI
      day_value:
        value_template: >
          {% set days = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"] %}
          {{ days[now().weekday()] }}

      month_value:
        value_template: >
          {% set months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"] %}
          {{ strptime(states('sensor.date'), '%Y-%m-%d').day }}
          {{ months[now().month-1] }}

      date_string:
        friendly_name: "Full Date"
        value_template: "{{ states('sensor.day_value') }}, {{ states('sensor.month_value') }} {{ now().year }}"

  # - platform: template
  #   sensors:
  #     kickboard_colour:
  #       friendly_name: "Kickboard Colour"
  #       value_template: >
  #         {%- if (states('sensor.octopus_agile_current_rate')|float(100) <= 2.5) -%}
  #         blue
  #         {%- elif (states('sensor.octopus_agile_current_rate')|float(100) <= 8.5) -%}
  #         green
  #         {%- elif (states('sensor.octopus_agile_current_rate')|float(100) <= 12.5) -%}
  #         yellow
  #         {%- elif (states('sensor.octopus_agile_current_rate')|float(100) <= 20) -%}
  #         orange
  #         {%- else -%}
  #         red
  #         {%- endif -%}

  - platform: template
    sensors:
      kitchen_temp_average:
        friendly_name: "Kitchen Average Temp"
        availability_template: >
          {%- if not is_state("sensor.kitchen_back_sensor_air_temperature", "unavailable") %}
              true
          {%- endif %}
        value_template: >
          {{ ( ( states('sensor.kitchen_back_sensor_air_temperature') | float(0) +
                 states('sensor.kitchen_sink_sensor_air_temperature') | float(0) +
                 states('sensor.kitchen_util_sensor_air_temperature') | float(0) +
                 states('sensor.kitchen_ipad_sensor_air_temperature') | float(0) ) / 4 ) | round(2) | float
            }}

      ## Calculates daylight brightness out of 100%
      sunlight_pct:
        value_template: >-
          {%- set elevation = state_attr('sun.sun','elevation') | float %}
          {%- set cloud_coverage = states('sensor.dark_sky_cloud_coverage') | float %}
          {%- set cloud_factor = (1 - (0.75 * ( cloud_coverage / 100) ** 3 )) %}
          {%- set min_elevation = -6 %}
          {%- set max_elevation = 90 %}
          {%- set adjusted_elevation = elevation - min_elevation %}
          {%- set adjusted_elevation = [adjusted_elevation,0] | max %}
          {%- set adjusted_elevation = [adjusted_elevation,max_elevation - min_elevation] | min %}
          {%- set adjusted_elevation = adjusted_elevation / (max_elevation - min_elevation) %}
          {%- set adjusted_elevation = adjusted_elevation %}
          {%- set adjusted_elevation = adjusted_elevation * 100 %}
          {%- set brightness = adjusted_elevation * cloud_factor %}
          {{ brightness | round }}
        unit_of_measurement: "%"
        device_class: "illuminance"

      ## Daylight brightness converted to opacity for CSS
      sunlight_opacity:
        value_template: >-
          {%- set sunpct = states('sensor.sunlight_pct') | float %}
          {%- set opacity = sunpct / 100 | float %}
          {{ opacity }}
