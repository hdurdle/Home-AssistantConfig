automation:
  - id: powerwall_set_reserve_and_mode_based_on_time
    alias: "Powerwall: Set reserve level and mode"
    mode: queued

    description: >
      Set powerwall reserve and mode

    trigger:
      - platform: time
        id: "time"
        at:
          - "06:30:05"
          - "14:00:05"
          - "15:00:05"
          - "15:59:55"
      - platform: numeric_state
        id: "above25"
        entity_id: sensor.powerwall_charge
        above: 25
      - platform: numeric_state
        id: "above50"
        entity_id: sensor.powerwall_charge
        above: 50
      - platform: numeric_state
        id: "below20"
        entity_id: sensor.powerwall_charge
        below: 20
      - platform: numeric_state
        id: "below45"
        entity_id: sensor.powerwall_charge
        below: 45
      - platform: state
        id: "states"
        entity_id:
          - binary_sensor.agile_peak
          - binary_sensor.agile_plunge
          - binary_sensor.powerwall_at_or_below_max_charge_cost_and_charge_limit
          # - sensor.zappi_jyggy_mode
          # - sensor.zappi_paddy_mode
      - platform: homeassistant
        id: "start"
        event: start
      - platform: event
        id: "reload"
        event_type: automation_reloaded

    action:
      choose:
        # Charging as plunge
        - conditions:
            condition: state
            entity_id: binary_sensor.agile_plunge
            state: "on"
          sequence:
            - service: tesla_gateway.set_operation
              data:
                real_mode: backup

        # Charging as price low
        - conditions:
            condition: state
            entity_id: binary_sensor.powerwall_at_or_below_max_charge_cost_and_charge_limit
            state: "on"
          sequence:
            - service: tesla_gateway.set_operation
              data:
                real_mode: backup

        # 1% Reserve for Peak Agile Pricing
        - conditions:
            condition: state
            entity_id: binary_sensor.agile_peak
            state: "on"
          sequence:
            - service: input_number.set_value
              target:
                entity_id: input_number.powerwall_reserve_requested
              data:
                value: 1
            - service: tesla_gateway.set_operation
              data:
                real_mode: self_consumption
                backup_reserve_percent: 1
        #            - delay: 5
        #            - service: tesla_gateway.set_reserve
        #              data:
        #                backup_reserve_percent: 1

        # Preventing too much usage Overnight when cars charging
        - conditions:
            - condition: state
              entity_id: binary_sensor.powerwall_at_or_below_max_charge_cost_and_charge_limit
              state: "off"
            - condition: state
              entity_id: sensor.solaredge_status
              state: "Sleep"
            # - condition: state
            #   entity_id: input_boolean.freeze_power_when_cars_charging
            #   state: 'on'
            # - condition: or
            #   conditions:
            #     - condition: state
            #       entity_id: sensor.zappi_jyggy_mode
            #       state: Fast
            #     - condition: state
            #       entity_id: sensor.zappi_paddy_mode
            #       state: Fast
          sequence:
            - service: tesla_gateway.set_operation
              data:
                real_mode: self_consumption
                backup_reserve_percent: "{{ states('sensor.powerwall_charge') | int }}"
            #            - delay: 5
            - service: input_number.set_value
              target:
                entity_id: input_number.powerwall_reserve_requested
              data:
                value: "{{ states('sensor.powerwall_charge') | int  }}"
        #            - service: tesla_gateway.set_reserve
        #              data:
        #                backup_reserve_percent: "{{ states('sensor.powerwall_charge') | int }}"

        # Preventing too much usage Overnight between charges
        - conditions:
            - condition: state
              entity_id: binary_sensor.powerwall_at_or_below_max_charge_cost_and_charge_limit
              state: "off"
            - condition: time
              after: "00:00:00"
              before: "06:30:00"
          sequence:
            - service: tesla_gateway.set_operation
              data:
                real_mode: self_consumption
                backup_reserve_percent: "{{ [ states('sensor.powerwall_charge') | int , states('input_number.overnight_powerwall_max_charge') | int]|min }}"
            #            - delay: 5
            - service: input_number.set_value
              target:
                entity_id: input_number.powerwall_reserve_requested
              data:
                value: "{{ [ states('sensor.powerwall_charge') | int , states('input_number.overnight_powerwall_max_charge') | int]|min }}"
        #            - service: tesla_gateway.set_reserve
        #              data:
        #                backup_reserve_percent: "{{ [ states('sensor.powerwall_charge') | int , states('input_number.overnight_powerwall_max_charge') | int]|min }}"

        # Ensure we have 25% by 15:00
        - conditions:
            - condition: time
              after: "14:00:00"
              before: "14:59:59"
            - condition: numeric_state
              entity_id: sensor.powerwall_charge
              below: 25
          sequence:
            #            - service: input_number.set_value
            #              target:
            #                entity_id: input_number.powerwall_charge_below_x_pence
            #              data:
            #                value: 0.5
            - service: tesla_gateway.set_operation
              data:
                real_mode: backup

        # Ensure we have 25% by 15:00
        - conditions:
            - condition: time
              after: "14:00:00"
              before: "14:59:59"
          sequence:
            #            - service: input_number.set_value
            #              target:
            #                entity_id: input_number.powerwall_charge_below_x_pence
            #              data:
            #                value: 0.5
            - service: tesla_gateway.set_operation
              data:
                real_mode: self_consumption
                backup_reserve_percent: 25
            - service: input_number.set_value
              target:
                entity_id: input_number.powerwall_reserve_requested
              data:
                value: 25

        # Ensure we have 50% by 16:00
        - conditions:
            - condition: time
              after: "15:00:00"
              before: "15:59:30"
            - condition: numeric_state
              entity_id: sensor.powerwall_charge
              below: 50
          sequence:
            #            - service: input_number.set_value
            #              target:
            #                entity_id: input_number.powerwall_charge_below_x_pence
            #              data:
            #                value: 0.5
            - service: tesla_gateway.set_operation
              data:
                real_mode: backup

        # Ensure we have 50% by 15:00
        - conditions:
            condition: time
            after: "15:00:00"
            before: "15:59:30"
          sequence:
            - service: tesla_gateway.set_operation
              data:
                real_mode: self_consumption
                backup_reserve_percent: 50
            #            - delay: 5
            - service: input_number.set_value
              target:
                entity_id: input_number.powerwall_reserve_requested
              data:
                value: 50

      # Set low reserve to make charge available for peak
      default:
        - service: input_number.set_value
          target:
            entity_id: input_number.powerwall_reserve_requested
          data:
            value: "{{ [ states('sensor.powerwall_charge') | int , 5]|min }}"
        - service: tesla_gateway.set_operation
          data:
            real_mode: self_consumption
            backup_reserve_percent: "{{ [ states('sensor.powerwall_charge') | int , 5]|min }}"
#        - service: tesla_gateway.set_reserve
#          data:
#            backup_reserve_percent: "{{ [ states('sensor.powerwall_charge') | int , 5]|min }}"
